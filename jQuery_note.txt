jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。
基础语法： $(selector).action()


[文档就绪事件]
这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。
$(document).ready(function(){
 
   // 开始写 jQuery 代码...
 
});


提示：简洁写法（与以上写法效果相同）:
$(function(){
 
   // 开始写 jQuery 代码...
 
});


JavaScript 入口函数:

window.onload = function () {
    // 执行代码
}
jQuery 入口函数与 JavaScript 入口函数的区别：

 jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。
 JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。





[jQuery 选择器]

在页面中选取所有 <p> 元素:
$("p")

通过 id 选取元素语法如下：
$("#test")

类选择器语法如下：
$(".test")

$("*")	选取所有元素	
$(this)	选取当前 HTML 元素	
$("p.intro")	选取 class 为 intro 的 <p> 元素	
$("p:first")	选取第一个 <p> 元素	
$("ul li:first")	选取第一个 <ul> 元素的第一个 <li> 元素	
$("ul li:first-child")	选取每个 <ul> 元素的第一个 <li> 元素	
$("[href]")	选取带有 href 属性的元素	
$("a[target='_blank']")	选取所有 target 属性值等于 "_blank" 的 <a> 元素	
$("a[target!='_blank']")	选取所有 target 属性值不等于 "_blank" 的 <a> 元素	
$(":button")	选取所有 type="button" 的 <input> 元素 和 <button> 元素	
$("tr:even")	选取偶数位置的 <tr> 元素	
$("tr:odd")	选取奇数位置的 <tr> 元素

通过 $(":button") 可以选取所有 type="button" 的 <input> 元素 和 <button> 元素，如果去掉冒号，$("button")只能获取 <button> 元素。

关于 : 和 [] 这两个符号的理解
：可以理解为种类的意思，如：p:first，p 的种类为第一个。
[] 很自然的可以理解为属性的意思，如：[href] 选取带有 href 属性的元素。






[jQuery 事件]
click() 方法是当按钮点击事件被触发时会调用一个函数
dblclick() 当双击元素时，会发生 dblclick 事件。
mouseenter() 当鼠标指针穿过元素时，会发生 mouseenter 事件。
mouseleave() 当鼠标指针离开元素时，会发生 mouseleave 事件。
mousedown() 当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。
mouseup() 当在元素上松开鼠标按钮时，会发生 mouseup 事件。
hover() 方法用于模拟光标悬停事件。当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。
focus() 当元素获得焦点时，发生 focus 事件。
blur() 当元素失去焦点时，发生 blur 事件。



一.keypress,keydown,keyup的区别:

 1.keydown：在键盘上按下某键时发生,一直按着则会不断触发（opera浏览器除外）, 它返回的是键盘代码;
 2.keypress：在键盘上按下一个按键，并产生一个字符时发生, 返回ASCII码。注意: shift、alt、ctrl等键按下并不会产生字符，所以监听无效 ,换句话说, 只有按下能在屏幕上输出字符的按键时keypress事件才会触发。若一直按着某按键则会不断触发。
 3.keyup：用户松开某一个按键时触发, 与keydown相对, 返回键盘代码.

 案例1:获取按键代码或字符的ASCII码

$(window).keydown( function(event){
   // 通过event.whitch可以拿到按键代码.  如果是keypress事件中,则拿到ASCII码.
} );




[jQuery 效果- 隐藏和显示]
语法:
$(selector).hide(speed,callback);
$(selector).show(speed,callback);
$(selector).toggle(speed,callback);


$(selector) 选中的元素的个数为 n 个，则 callback 函数会执行 n 次。
对于这里，当 callback 函数加上括号时，函数立即执行，只会调用一次， 如果不加括号，元素显示或隐藏后调用函数，才会调用多次。




［jQuery 效果 - 淡入淡出］
jQuery fadeIn() 用于淡入已隐藏的元素。语法:$(selector).fadeIn(speed,callback);
jQuery fadeOut() 方法用于淡出可见元素。语法:$(selector).fadeOut(speed,callback);
jQuery fadeToggle() 方法 语法:$(selector).fadeToggle(speed,callback);
jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。语法:$(selector).fadeTo(speed,opacity,callback);

实例
$("button").click(function(){
  $("#div1").fadeIn();
  $("#div2").fadeIn("slow");
  $("#div3").fadeIn(3000);
});




［jQuery 效果 - 滑动］
Query slideDown() 方法用于向下滑动元素。语法:$(selector).slideDown(speed,callback);
jQuery slideUp() 方法用于向上滑动元素。语法:$(selector).slideUp(speed,callback);
jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。$(selector).slideToggle(speed,callback);



［jQuery 效果- 动画］
jQuery animate() 方法用于创建自定义动画。语法：$(selector).animate({params},speed,callback);


jQuery animate() - 操作多个属性
请注意，生成动画的过程中可同时使用多个属性：

实例
$("button").click(function(){
  $("div").animate({
    left:'250px',
    opacity:'0.5',
    height:'150px',
    width:'150px'
  });

需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。
});


默认地，jQuery 提供针对动画的队列功能。

这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的"内部"队列。然后逐一运行这些 animate 调用。

实例 1
$("button").click(function(){
  var div=$("div");
  div.animate({height:'300px',opacity:'0.4'},"slow");
  div.animate({width:'300px',opacity:'0.8'},"slow");
  div.animate({height:'100px',opacity:'0.4'},"slow");
  div.animate({width:'100px',opacity:'0.8'},"slow");
});





［jQuery 停止动画］
stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。语法:$(selector).stop(stopAll,goToEnd)


[jQuery Callback 方法]
Callback 函数在当前动画 100% 完成之后执行。	
以下实例在隐藏效果完全实现后回调函数:

使用 callback 实例
$("button").click(function(){
  $("p").hide("slow",function(){
    alert("段落现在被隐藏了");
  });
});


	
以下实例没有回调函数，警告框会在隐藏效果完成前弹出：

没有 callback(回调)
$("button").click(function(){
  $("p").hide(1000);
  alert("段落现在被隐藏了");
});





[jQuery - 链(Chaining)]
通过 jQuery，可以把动作/方法链接在一起。
Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）。
实例
$("#p1").css("color","red").slideUp(2000).slideDown(2000);

实例
$("#p1").css("color","red")
  .slideUp(2000)
  .slideDown(2000);




 [jQuery - 获取内容和属性]
text() - 设置或返回所选元素的文本内容
html() - 设置或返回所选元素的内容（包括 HTML 标记）
val() - 设置或返回表单字段的值

获取属性 - attr()
jQuery attr() 方法用于获取属性值。

下面的例子演示如何获得链接中 href 属性的值：

实例
$("button").click(function(){
  alert($("#runoob").attr("href"));
});

attr 和 prop 的区别介绍：

对于 HTML 元素本身就带有的固有属性，在处理时，使用 prop 方法。
对于 HTML 元素我们自己自定义的 DOM 属性，在处理时，使用 attr 方法。

实例 1：

<a href="https://www.runoob.com" target="_self" class="btn">菜鸟教程</a>
这个例子里 <a> 元素的 DOM 属性有: href、target 和 class，这些属性就是 <a> 元素本身就带有的属性，也是 W3C 标准里就包含有这几个属性，或者说在 IDE 里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用 prop 方法。

<a href="#" id="link1" action="delete" rel="nofollow">删除</a>
这个例子里 <a> 元素的 DOM 属性有: href、id 和 action，很明显，前两个是固有属性，而后面一个 action 属性是我们自己自定义上去的，<a> 元素本身是没有这个属性的。这种就是自定义的 DOM 属性。处理这些属性时，建议使用 attr 方法。





[jQuery - 设置内容和属性]
text() - 设置或返回所选元素的文本内容
html() - 设置或返回所选元素的内容（包括 HTML 标记）
val() - 设置或返回表单字段的值

ps:$("#test3").val("RUNOOB");
ps:$("#test2").html("<b>Hello world!</b>");

text()、html() 以及 val() 的回调函数
上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。


jQuery attr() 方法也用于设置/改变属性值。

实例
  $("#runoob").attr("href","http://www.runoob.com/jquery");

实例2
 $("#runoob").attr({
    "href" : "http://www.runoob.com/jquery",
    "title" : "jQuery 教程"
});

jQuery 方法 attr()，也提供回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。





[jQuery - 添加元素]
append() - 在被选元素的结尾插入内容,在选中元素内
prepend() - 在被选元素的开头插入内容,在选中元素内
after() - 在被选元素之后插入内容,在选中元素外
before() - 在被选元素之前插入内容,在选中元素外


function appendText(){
	var txt1="<p>文本。</p>";              // 使用 HTML 标签创建文本
	var txt2=$("<p></p>").text("文本。");  // 使用 jQuery 创建文本
	var txt3=document.createElement("p");
	txt3.innerHTML="文本。";               // 使用 DOM 创建文本 text with DOM
	$("body").append(txt1,txt2,txt3);        // 追加新元素
}





[jQuery - 删除元素]
remove() - 删除被选元素（及其子元素）
empty() - 从被选元素中删除子元素


jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。
该参数可以是任何 jQuery 选择器的语法。

下面的例子删除 class="italic" 的所有 <p> 元素：
实例
$("p").remove(".italic");




[jQuery - 获取并设置 CSS 类]

addClass() - 向被选元素添加一个或多个类
removeClass() - 从被选元素删除一个或多个类
toggleClass() - 对被选元素进行添加/删除类的切换操作
css() - 设置或返回样式属性

ps1:$("div").addClass("important");
ps2:$("body div:first").addClass("important blue");



[jQuery css() 方法]
如需返回指定的 CSS 属性的值，请使用如下语法：
css("propertyname");

ps1:$("p").css("background-color");


如需设置指定的 CSS 属性，请使用如下语法：
css("propertyname","value");

下面的例子将为所有匹配元素设置 background-color 值：
实例
$("p").css("background-color","yellow");


设置多个 CSS 属性
如需设置多个 CSS 属性，请使用如下语法：
css({"propertyname":"value","propertyname":"value",...});

下面的例子将为所有匹配元素设置 background-color 和 font-size：实例
$("p").css({"background-color":"yellow","font-size":"200%"});




[jQuery 尺寸]

width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。
height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。

innerWidth() 方法返回元素的宽度（包括内边距）。
innerHeight() 方法返回元素的高度（包括内边距）。

outerWidth() 方法返回元素的宽度（包括内边距和边框）。
outerHeight() 方法返回元素的高度（包括内边距和边框）



[jQuery 遍历]
parent() 方法返回被选元素的直接父元素。
parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。
parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。


您也可以使用可选参数来过滤对祖先元素的搜索。

下面的例子返回所有 <span> 元素的所有祖先，并且它是 <ul> 元素：
$(document).ready(function(){
  $("span").parents("ul");
});



children() 方法返回被选元素的所有直接子元素。该方法只会向下一级对 DOM 树进行遍历。

下面的例子返回每个 <div> 元素的所有直接子元素：
$(document).ready(function(){
  $("div").children();
});


您也可以使用可选参数来过滤对子元素的搜索。
下面的例子返回类名为 "1" 的所有 <p> 元素，并且它们是 <div> 的直接子元素：
$(document).ready(function(){
  $("div").children("p.1");
});


find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。

下面的例子返回属于 <div> 后代的所有 <span> 元素：
$(document).ready(function(){
  $("div").find("span");
});


下面的例子返回 <div> 的所有后代：
$(document).ready(function(){
  $("div").find("*");
});





[jQuery 遍历 - 同胞(siblings)]
siblings() 方法返回被选元素的所有同胞元素。

下面的例子返回 <h2> 的所有同胞元素：
$(document).ready(function(){
  $("h2").siblings();
});


您也可以使用可选参数来过滤对同胞元素的搜索。

下面的例子返回属于 <h2> 的同胞元素的所有 <p> 元素：
$(document).ready(function(){
  $("h2").siblings("p");
});


next() 方法返回被选元素的下一个同胞元素。该方法只返回一个元素。

nextAll() 方法返回被选元素的所有跟随的同胞元素。
下面的例子返回 <h2> 的所有跟随的同胞元素：
$(document).ready(function(){
  $("h2").nextAll();
});

nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。

下面的例子返回介于 <h2> 与 <h6> 元素之间的所有同胞元素：
$(document).ready(function(){
  $("h2").nextUntil("h6");
});


prev(), prevAll() 以及 prevUntil() 方法的工作方式与next(),nextAll(),prevUntil()的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历）。



[jQuery 遍历- 过滤]
first() 方法返回被选元素的首个元素。

下面的例子选取首个 <div> 元素内部的第一个 <p> 元素：

实例
$(document).ready(function(){
  $("div p").first();
});


last() 方法返回被选元素的最后一个元素。

下面的例子选择最后一个 <div> 元素中的最后一个 <p> 元素：
$(document).ready(function(){
  $("div p").last();
});


eq() 方法返回被选元素中带有指定索引号的元素。

索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 <p> 元素（索引号 1）：
$(document).ready(function(){
  $("p").eq(1);
});


filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。

下面的例子返回带有类名 "url" 的所有 <p> 元素：
$(document).ready(function(){
  $("p").filter(".url");
});



not() 方法返回不匹配标准的所有元素。
提示：not() 方法与 filter() 相反。

下面的例子返回不带有类名 "url" 的所有 <p> 元素：
$(document).ready(function(){
  $("p").not(".url");
});



[jQuery - AJAX load() 方法]
jQuery load() 方法是简单但强大的 AJAX 方法。
load() 方法从服务器加载数据，并把返回的数据放入被选元素中。

语法:$(selector).load(URL,data,callback);


这是示例文件（"demo_test.txt"）的内容：
<h2>jQuery AJAX 是个非常棒的功能！</h2>
<p id="p1">这是段落的一些文本。</p>

ps1:$("#div1").load("demo_test.txt");


也可以把 jQuery 选择器添加到 URL 参数。

下面的例子把 "demo_test.txt" 文件中 id="p1" 的元素的内容，加载到指定的 <div> 元素中：
$("#div1").load("demo_test.txt #p1");



可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：

responseTxt - 包含调用成功时的结果内容
statusTXT - 包含调用的状态
xhr - 包含 XMLHttpRequest 对象
下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示"外部内容加载成功！"，而如果失败，则显示错误消息：

实例
$("button").click(function(){
  $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
    if(statusTxt=="success")
      alert("外部内容加载成功!");
    if(statusTxt=="error")
      alert("Error: "+xhr.status+": "+xhr.statusText);
  });
});




[jQuery - AJAX get() 和 post() 方法]
HTTP 请求：GET vs. POST
两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。

GET - 从指定的资源请求数据
POST - 向指定的资源提交要处理的数据
GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。

POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。



$.get() 方法通过 HTTP GET 请求从服务器上请求数据。

语法：
$.get(URL,callback);
必需的 URL 参数规定您希望请求的 URL。

可选的 callback 参数是请求成功后所执行的函数名。

下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：

实例
$("button").click(function(){
  $.get("demo_test.php",function(data,status){
    alert("数据: " + data + "\n状态: " + status);
  });
});




$.post() 方法通过 HTTP POST 请求向服务器提交数据。

语法:

$.post(URL,data,callback);
必需的 URL 参数规定您希望请求的 URL。

可选的 data 参数规定连同请求发送的数据。

可选的 callback 参数是请求成功后所执行的函数名。

下面的例子使用 $.post() 连同请求一起发送数据：

实例
$("button").click(function(){
    $.post("/try/ajax/demo_test_post.php",
    {
        name:"菜鸟教程",
        url:"http://www.runoob.com"
    },
        function(data,status){
        alert("数据: \n" + data + "\n状态: " + status);
    });
});





[jQuery - noConflict() 方法]
noConflict() 方法会释放对 $ 标识符的控制，这样其他脚本就可以使用它了。

当然，您仍然可以通过全名替代简写的方式来使用 jQuery：

实例
$.noConflict();
jQuery(document).ready(function(){
  jQuery("button").click(function(){
    jQuery("p").text("jQuery 仍然在工作!");
  });
});



您也可以创建自己的简写。noConflict() 可返回对 jQuery 的引用，您可以把它存入变量，以供稍后使用。请看这个例子：

实例
var jq = $.noConflict();
jq(document).ready(function(){
  jq("button").click(function(){
    jq("p").text("jQuery 仍然在工作!");
  });
});


如果你的 jQuery 代码块使用 $ 简写，并且您不愿意改变这个快捷方式，那么您可以把 $ 符号作为变量传递给 ready 方法。这样就可以在函数内使用 $ 符号了 - 而在函数外，依旧不得不使用 "jQuery"：

实例
$.noConflict();
jQuery(document).ready(function($){
  $("button").click(function(){
    $("p").text("jQuery 仍然在工作!");
  });
});




以上为常用基本用法.
其他更多详细请百度jQuery手册。